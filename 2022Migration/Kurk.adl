CONTEXT MigrationDemo
PURPOSE CONTEXT MigrationDemo MARKDOWN
{+ This script will demo part of the migration of just one relation: `r[A*B]`.
The demo is done on the old Ampersand platform (RAP4).

### Intro
Relation: `r[A*B]` contains just one pair: `("a1", "b1")`, but there are two violations of the totality rule: `"a2"` and `"a3"`.
This is shown in the left part of the screen, in column `Old`.
Column `Migration` shows the migrated relation `r[A*B]`.
You can demonstrate all insert and delete operations in the migration environment by adding or removing atoms in the column "Migration".
Note the field "block". This field signals that this record can no longer violate the rule.
This recipe works for any rule of the form `RULE a |- c`, not just totality.
Totality has the form `a=I` and `c=r;r~`, so it has the right form.
+}

POPULATION "A" CONTAINS [ "a1", "a2" , "a3" ]
POPULATION "B" CONTAINS [ "b1", "b2" , "b3" ]
RELATION old_r[A*B] [UNI] = [ ("a1", "b1") ]
-- The totality of r applies in the migration system, not in the existing situation.
-- So `RULE I |- old_r;old_r~` is not satisfied, but `RULE I |- new_r;new_r~` is.

REPRESENT B TYPE ALPHANUMERIC -- This is only here to smoothen the demo.

-- The following copies `old_r` to `new_r`. `copy_r` is needed to ensure that `new_r` can be edited after copying.
-- For every relation $r$ shared by the existing and desired systems, we generate a helper relation: ${\tt copy}_r$, and a transaction to produce its population.
RELATION copy_r[A*B]
RELATION new_r[A*B] [UNI]
-- We create a transactions (enforcement rules) to copy the population of relations from `old_r` to `new_r`.
ENFORCE copy_r >: new_r /\ old_r
ENFORCE new_r >: old_r - copy_r

-- For each new blocking invariant $u$, we generate a helper relation: ${\tt fixed}_u$, to register all violations that are fixed.
-- The helper relation is needed to ensure that the fixing of violations terminates.
RELATION fixed_TOTr[A*A]
-- We also need a transaction to produce its population:
ENFORCE fixed_TOTr >: I /\ new_r;new_r~
-- The following blocks a violation from reoccurring, but allows fixing any remaining violation.
RULE Block_TOTr : fixed_TOTr |- new_r;new_r~
MESSAGE "Relation r[A*B] must remain total."
VIOLATION (TXT "Atom ", SRC I, TXT " must remain paired with an atom from B.")

-- To signal users that there are violations that need to be fixed, we generate a business constraint for each new blocking invariant $u$:
ROLE User MAINTAINS TOTr
RULE TOTr : I - fixed_TOTr |- new_r;new_r~
MESSAGE "Please, make relation r[A*B] total."
VIOLATION (TXT "Fix ", SRC I, TXT " by pairing it with an (any) atom from B.")

-- The migration engineer can switch all traffic to the desired system
-- after resolving the violations that prohibit deploying the desired system.
-- That is the case when violations of new invariants on the old population have all been fixed:
ROLE User MAINTAINS CleanUp_TOTr
RULE CleanUp_TOTr : V[ONE*A] ; (I - fixed_TOTr) ; V[A*ONE]
MESSAGE "Now you can remove the migration system because relation r[A*B] is total."

INTERFACE Overview : "_SESSION";V[SESSION*A] cRud BOX<TABS>
    [ "end user functionality" : I cRud BOX<TABLE>
        [ Old : I cRud BOX<RAW>
           [ "A" : I                        cRud
           , "B" : old_r                    cRud
           ]
        , Migration : I cRud BOX
           [ "B": new_r                     CRUd
           ]
        ]
    , "details" : I cRud BOX<TABLE>
        BOX<TABLE>
        [ Old : I cRud BOX<RAW>
           [ "A" : I                        cRud
           , "B" : old_r                    cRud
           ]
        , Migration : I cRud BOX
           [ "B": new_r                     CRUd
           ]
        , copy_r : copy_r                   cRud
        , "block" : fixed_TOTr              cRud
        ]
    ]

ENDCONTEXT

{+ calculate the violations of the old rule. +}
    - (Antecedent |- Consequent)
<=>    { definition of |- }
    -(-Antecedent \/ Consequent)
<=>    { DeMorgan }
    Antecedent /\ -(Consequent)
<=>    { definition of binary - }
    Antecedent - Consequent
+}